/* Autogenerated code, forces testlib to return exit codes for EJUDGE. */
#define EJUDGE

#include "testlib.h"
#include <cctype>
using namespace std;

#define pb push_back
#define sz(v) ((int)v.size())
#define mp make_pair

typedef pair <int, int> pi;

int N, K;

struct Team {
    string name;
    string res;
    Team() {}
    void loadInf(char mode) {
        name = inf.readWord();
        res = inf.readWord();
        if (sz(res) != K) 
            switch (mode) {
                case 'o': quitf(_wa, "team: %s\ntoo many tasks(output)", name.c_str());
                case 'a': quitf(_fail, "team: %s\ntoo many tasks",name.c_str());
            }
        for (int i = 0; i < K; ++i) {
            if (res[i] != '+' && res[i] != '-')
                switch (mode) {
                    case 'o': quitf(_pe, "team: %s\nunexpected symbol in table(output)", name.c_str());
                    case 'a': quitf(_fail, "team: %s\nunexpected symbol in table",name.c_str());
                }
        }
    }

    void loadOuf(char mode) {
        name = ouf.readWord();
        res = ouf.readWord();
        if (sz(res) != K)
            switch (mode) {
                case 'o': quitf(_wa, "team: %s\ntoo many tasks(output)", name.c_str());
                case 'a': quitf(_fail, "team: %s\ntoo many tasks",name.c_str());
            }
        for (int i = 0; i < K; ++i) {
            if (res[i] != '+' && res[i] != '-')
                switch (mode) {
                    case 'o': quitf(_pe, "team: %s\nunexpected symbol in table(output)", name.c_str());
                    case 'a': quitf(_fail, "team: %s\nunexpected symbol in table",name.c_str());
                }
        }
    }

    void loadAns(char mode) {
        name = ans.readWord();
        res = ans.readWord();
        if (sz(res) != K)
            switch (mode) {
                case 'o': quitf(_wa, "team: %s\ntoo many tasks(output)", name.c_str());
                case 'a': quitf(_fail, "team: %s\ntoo many tasks",name.c_str());
            }
        for (int i = 0; i < K; ++i) {
            if (res[i] != '+' && res[i] != '-')
                switch (mode) {
                    case 'o': quitf(_pe, "team: %s\nunexpected symbol in table(output)", name.c_str());
                    case 'a': quitf(_fail, "team: %s\nunexpected symbol in table",name.c_str());
                }
        }
    }
};

inline int calc(string s) {
    int cnt = 0;
    for (int i = 0; i < s.size(); ++i)
        cnt += (s[i] == '+');
    return cnt;
}

bool ls (Team t1, Team t2) {
    int c1 = calc(t1.res),
        c2 = calc(t2.res);
    if (c1 != c2)
        return c1 > c2;
    return t1.name < t2.name;
}
vector <Team> Input, Output, Answer;

void check(vector <Team>& Teams, char mode) {
	reverse(Teams.begin(), Teams.end());
	for (int i = 0; i < N; ++i) {
        if (Input[i].name != Teams[i].name)
            switch (mode) {
                case 'o': quitf(_wa, "Name of %d's team does not match(output)", N - i);
                case 'a': quitf(_fail, "Name of %d's team does not match", N - i);
            }
        for (int k = 0; k < K; ++k) {
            if (Input[i].res[k] == '+' && Teams[i].res[k] != '+')
                switch (mode) {
                    case 'o': quitf(_wa, "Team %d task %d: AC lost(output)", N - i, k);
                    case 'a': quitf(_fail, "Team %d task %d: AC lost", N - i, k);
                }
        }
    }

    for (int i = 0; i < N - 1; ++i)
        if (ls(Teams[i], Teams[i + 1]))
            switch (mode) {
                case 'o': quitf(_wa, "Wrong table: string %d does not math (output)", N - i);
                case 'a': quitf(_fail, "Wrong table: string %d does not math", N - i);
            }
}
int main(int argc, char* argv[])
{
	registerTestlibCmd(argc, argv);

	string sOuf = ouf.readString(),
		sAns = ans.readString();
	
	N = inf.readInt();
	K = inf.readInt();
	Input.resize(N);
	Output.resize(N);
	Answer.resize(N);
	inf.readEoln();
	for (int i = 0; i < N; ++i) {
                Input[i].loadInf('i');
		if (i != N - 1)
			inf.readEoln();
		else {
			inf.skipBlanks();
			inf.readEof();
		}
	}
	if (sOuf == "Possible") {
		for (int i = 0; i < N; ++i) {
                        Output[i].loadOuf('o');
			if (i != N - 1)
				ouf.readEoln();
		}
		check(Output, 'o');
	}
	if (sAns == "Possible") {
		for (int i = 0; i < N; ++i) {
                        Answer[i].loadAns('a');
			if (i != N - 1)
				ans.readEoln();
		}
		check(Answer, 'a');
	}
	ouf.skipBlanks();
	ouf.readEof();
	ans.skipBlanks();
	ans.readEof();
	
	if (sAns != sOuf) {
		if (sAns == "Possible")
			quitf(_wa, "Competitor could not build the table, when jury could");
		else
			quitf(_fail, "Jury could not build the table, when competitor could");
	}
	
	quitf(_ok,"ok");
	return 0;
}
