/* Autogenerated code, forces testlib to return exit codes for EJUDGE. */
#define EJUDGE

#include "testlib.h"
#include <iostream>
#include <fstream>
#include <cstdlib>
#include <cmath>
#include <ctype.h>

using namespace std;

const int maxCoord = 5e3;
const double eps = 1e-6;

struct point
{
	double x,y;
	point(double X, double Y): x(X), y(Y) {}
	point() { x = y = 0; }
};

point operator - (const point& lhs, const point&  rhs) { return point(lhs.x - rhs.x, lhs.y - rhs.y); }

double vect_prod(const point& p1, const point& p2)
{
	return abs(p1.x * p2.y - p1.y * p2.x);
}

point p1,p2,p3,p4;

string tolower(string s) {
	for (int i = 0; i < s.size(); i ++)
		s[i] = tolower(s[i]);
	return s;
}

bool get_answer(InStream& in, bool jury)
{
	bool answer = tolower(in.readToken("yes|Yes|yEs|YEs|yeS|YeS|yES|YES|no|No|nO|NO")) == "yes";
	if (answer)
	{
		double x = in.readDouble(-maxCoord, maxCoord);		
		double y = in.readDouble(-maxCoord, maxCoord);
		point q(x,y);
		if (!doubleCompare(vect_prod(p1 - q, p2 - q), vect_prod(p3 - q, p4 - q), eps))
		{
			if (jury)
				quitf(_fail, "Jury answer is incorrect: areas are not equal");
			else
				quitf(_wa, "Contestant answer is incorrect: areas are not equal");
		}
		if (vect_prod(p1 - q, p2 - q) < 0.1 + eps) 
		{
			if (jury)
				quitf(_fail, "Jury has zero-aread triangle in answer");
			else
				quitf(_wa, "Contestant has zero-aread triangle in answer");
		}
	}
	return answer;
}

point read_point(InStream& in)
{
	int x = in.readInt();
	int y = in.readInt();
	return point(x, y);
}

int main(int argc, char* argv[])
{
	registerTestlibCmd(argc, argv);
	p1 = read_point(inf);
	p2 = read_point(inf);
	p3 = read_point(inf);
	p4 = read_point(inf);
	bool jury_answer = get_answer(ans, 1);
	bool contestant_answer = get_answer(ouf, 0);
	if (jury_answer && !contestant_answer)
		quitf(_wa, "Contestant didn't find answer");
	if (!jury_answer && contestant_answer)
		quitf(_fail, "Jury didn't find answer.");
	quitf(_ok, "Ok!");
	return 0;
}
