{"scoring":"Эта задача состоит из пяти подзадач. Для некоторых подзадач выполняются дополнительные ограничения, указанные в таблице ниже.\r\n\r\n\\begin{center}\r\n\\begin{tabular}{|c|c|c|c|}\r\n\\hline\r\n\\textbf{Подзадача} & \r\n\\textbf{Количество тестов} & \r\n\\textbf{Дополнительные ограничения} &\r\n\\parbox{3cm}{\\textbf{\\centering\\\\Необходимые\\\\подзадачи\\\\\\vspace{2mm}}} \r\n\\\\ \\hline\r\n1  & 5 & $n \\cdot m \\leq 3000$ & {---}\r\n\\\\ \\hline\r\n2  & 5 & $n, m \\leq 300$ & {---}\r\n\\\\ \\hline\r\n3  & 5 & $n = 1$ или $m = 1$ & {---}\r\n\\\\ \\hline\r\n4  & 5 & $p \\leq 5000$ & {---}\r\n\\\\ \\hline\r\n5  & 30 & {---} & {1, 2, 3, 4}\r\n\\\\ \\hline\r\n\\end{tabular}\r\n\\end{center}\r\n\r\n\r\nКаждый тест в каждой подзадаче оценивается независимо, в 2 балла.","notes":"","legend":"Кот Гусь подготовил для Ника Фьюри прямоугольную таблицу $a$ размера $n \\times m$, содержащую числа от $0$ до $p-1$. \r\n\r\nНик Фьюри сразу понял, что каждое число в этой таблице выбрано \\textbf{случайно равновероятно} от $0$ до $p-1$, независимо от остальных.\r\n\r\nВаша задача \"--- найти прямоугольную подматрицу этой таблицы, в которой сумма делится на $p$. Среди всех таких подматриц нужно найти ту, в которой сумма элементов максимальна.\r\n\r\nФормально, вам необходимо найти такие $1 \\leq i_1 \\leq i_2 \\leq n$, $1 \\leq j_1 \\leq j_2 \\leq m$, что сумма $a_{x, y}$ по всем $i_1 \\leq x \\leq i_2, j_1 \\leq y \\leq j_2$ делится на $p$, и среди таких имеет максимальную сумму.","authorLogin":"gainullin.ildar","language":"russian","timeLimit":3000,"output":"Выведите одно целое число \"--- максимальную сумму прямоугольной подматрицы, в которой сумма делится на $p$.\r\n\r\nЕсли таких нет, выведите $0$.","inputFile":"stdin","outputFile":"stdout","input":"В первой строке входного файла расположено три целых числа $n, m, p$ ($1 \\leq n \\cdot m, p \\leq 1\\,000\\,000$) \"--- размерности матрицы и число, на которое должна делится сумма подматрицы.\r\n\r\nВ следующих $n$ строках расположено по $m$ целых чисел, $j$-е число в $i$-й строке равно $a_{i, j}$ ($0 \\leq a_{i, j} \\leq p - 1$).\r\n\r\n\r\nГарантируется, что каждое число в $a$ выбрано независимо случайно равновероятно от $0$ до $p-1$.","authorName":"Ildar Gainullin","sampleTests":[{"output":"65","input":"6 7 5\r\n0 0 3 0 1 0 4\r\n0 2 3 0 2 2 1\r\n2 4 1 4 4 0 3\r\n1 1 0 2 0 3 2\r\n3 0 3 1 0 1 2\r\n1 2 0 0 3 3 1\r\n","inputFile":"example.01","outputFile":"example.01.a"}],"name":"Кот Гусь и случайная матрица","interaction":null,"memoryLimit":268435456,"tutorial":"Чтобы решить \\textbf{первую подзадачу}, достаточно реализовать любое решение за $O((nm)^2)$, например, перебрать координаты двух углов, и посчитать с помощью частичных сумм сумму на подматрице.\r\n\r\nЧтобы решить \\textbf{вторую подзадачу}, необходимо уже реализовать решение за $O(n^2m)$, перебрав первую и последнюю строку подматрицы, и, таким образом, свести подзадачу к подзадаче с $n=1$.\r\n\r\nЧтобы окончательно решить вторую подзадачу, необходимо придумать, как решить \\textbf{третью подзадачу}. На одной прямой (вертикальной или горизонтальной) необходимо найти подотрезок с максимальной суммой, делящейся на $p$. Это можно сделать, посчитав префиксные суммы, для каждого остатка по модулю $p$, а затем рассмотреть наибольшую и наименьшую суммы с таким остатком.\r\n\r\nТаким образом, первые три подзадачи возможно решить без использования случайности входных данных.\r\n\r\nЧтобы решить \\textbf{четвертую подзадачу}, нужно воспользоваться случайностью входных данных, и реализовать более медленно правильное решение, не будем на этом останавливаться и сразу перейдем к решению, набирающему 100 баллов.\r\n\r\nБудем строить подматрицы в порядке убывания суммы, от большей к меньшей. Для этого изначально возьмем всю матрицу полностью. Очевидно, она является подматрицой с наибольшей суммой. Какой может быть вторая по сумме матрица? Конечно, это вся матрица, из которой удалили какую-либо крайнюю строку/столбец. Аналогично, можно развить эту идею, поддерживая подматрицы в set. Каждый раз, можем доставать матрицу, которая является максимальной на данный момент, и обрезать у нее по одному строке и столбцу. Как только мы нашли матрицу с суммой делящейся на $p$, стоит вывести ее как ответ. \r\n\r\nЕсли реализовать это с помощью set, то решение может набирать \\textbf{80-100 баллов}.\r\n\r\nЧтобы получить \\textbf{100 баллов}, нужно реализовать это с помощь priority queue, не используя проверку, что  такую матрицу уже рассматривали, а поддерживая указатель $ptr$ на текущую границу, которую требуется отрезать, и сначала увеличивать $x_1$, затем, возможно, сдвигая указатель, затем уменьшать $x_2$, если указатель сейчас стоит на этой координате, и так далее. \r\n\r\nТаким образом путь до каждой матрицы будет ровно один \"--- последовательно подставляющий нужные координаты по очереди.\r\nВ итоге, в priority queue будет храниться $(x_1, x_2, y_1, y_2, ptr)$, где $ptr$ принимает значения $0..3$. \r\n\r\nМожно доказать, что с очень высокой вероятностью, количество матриц, которые придется рассмотреть, достаточно мало, а именно, порядка $O(p)$.\r\n\r\nТакже возможны решения, которые перебирают матрицы только <<достаточно>> большого размера."}